<?php
// Id: my_bookmarks.info, 2011/01/10 14:34:45 sheetal Exp $

/**
 * Implementation of hook_menu().
 */
function my_bookmarks_menu() {
  $items = array();
  
  $items['anonymous-bookmark'] = array(
    'title' => '',
    'page callback' => 'my_bookmarks_anonymous_page',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/*
 * Implementation of hook_views_api().
 */
function my_bookmarks_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'my_bookmarks') .'/views',
  );
}

 /**
 * Implementation of hook_views_default_views().
 *
 * To add a new view, create a separate .inc file in the views directory.
 */
function my_bookmarks_views_default_views() {
  return lib_views_load_module_default_views('my_bookmarks');
}

/**
 * Implementation of hook_block().
 */
function my_bookmarks_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {

    case 'list':
      $blocks[0] = array(
				'info' => t('My bookmarks'),
				'cache' => BLOCK_NO_CACHE,
      );
      return $blocks;

    case 'view':
      if ($delta == 0) {
        $block['subject'] = t('My bookmarks');
        if (!user_is_logged_in()) {
          // Give anonymous users information about what they are missing.
          $content  = '<p><strong>' . t('You must be registered and signed in to save bookmarks to "My workspace".') . '</strong>';
          $content .= '<br>' . t("This is where your bookmarks will be stored - enabling you to return to any content you have found useful on the site. You can bookmark most pages on the site by clicking on the 'bookmark' link at the top right of pages.");
          $content .= '<br>' . t('<a href="@register">Register</a> or <a href="@sign-in">Sign in</a>', array('@register' => url('user/register'), '@sign-in' => url('user/login'))) . '</p>';

          $block['content'] = $content;
        }
        else {
          // If an actual user send them the view.
          $block['content'] = views_embed_view('bookmarks');
        }
      }
      return $block;
  }
}

/**
 * Menu callback for the anonymous bookmarking login prompt.
 */
function my_bookmarks_anonymous_page() {
  // set title of page with bookmarking page title  
  if (isset($_REQUEST['bookmark_title'])) {
    drupal_set_title(t('Bookmark @bookmark-title', array('@bookmark-title' => $_REQUEST['bookmark_title'])));
  }
  else {
    drupal_set_title(t('Please sign in to use bookmarks'));
  }
  // get destination to set it, to be get redirected to same bookmarking page on login 
  $destination = drupal_get_destination();
  
  // page content display for anonymous user
  $content  = '<p><strong>'. t('You must be registered and signed in to save bookmarks to "My workspace".') . '</strong>';
  $content .= '<br>' . t("This is where your bookmarks will be stored - enabling you to return to any content you have found useful on the site. You can bookmark most pages on the site by clicking on the 'bookmark' link at the top right of pages.");
  $content .= '<br>' . t('<a href="@register">Register</a> or <a href="@sign-in?@destination">Sign in</a>', array('@register' => url('user/register'), '@sign-in' => url('user/login'), '@destination' => $destination )) . '</p>';
  if ($destination) {
    $content .= '<p>'. t('<a href="@destination">Cancel and go back</a>', array('@destination' => $_REQUEST['destination'])) .'</p>';
  }  
  return $content;
}

/**
 * Implementation of hook_flag_default_flags().
 */
function my_bookmarks_flag_default_flags() {
  $flags = array();
  module_load_include('inc', 'my_bookmarks', 'includes/my_bookmarks.flag_default');
  _my_bookmarks_page_flags($flags);    
  return $flags;
}

/**
 * Implementation of hook_token_list().
 */
function my_bookmarks_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'global' || $type == 'all') {
    $tokens['global']['query-NAME'] = t('The value of the field <em>NAME</em> from the url query string.');
  }
  return $tokens;
}

/**
 * Implementation of hook_flag_access().
 */
function my_bookmarks_flag_access($flag, $content_id, $action, $account) {
  // Override access to the bookmarking flag so that the flagging block still
  // appears. Then override the content in my_bookmarks_preprocess_block.
  // This functionality depends on a patch to block display in flag_page.
  // @todo It would me nice to move this access code over to flag_anon.
  // However this is not possible due to http://drupal.org/node/1033726.
  if ($flag->content_type == 'page' && $flag->name == 'flag_bookmark' && $action == 'flag') {
    return TRUE;
  }
}

/**
 * Implementation of hook_preprocess().
 */
function my_bookmarks_preprocess_block(&$variables) {
  // Override bookmarking block when anonymous to print our own link.
  // @todo In the future it would be great to move this over to flag_anon.
  if ($variables['block']->delta == 'flag_bookmark' && !user_is_logged_in()) {
    $variables['block']->content = t('<a href="@login-to-bookmark&bookmark_title=@bookmark_title?@destination">Bookmark</a>', array('@login-to-bookmark' => url("anonymous-bookmark"), '@destination' => drupal_get_destination(), '@bookmark_title' => drupal_get_title()));
  }
}

/**
 * Implementation of hook_token_values().
 */
function my_bookmarks_token_values($type, $object = NULL) {
  if ($type = 'global') {
    // Pass along each query string as a token. This is used for default
    // bookmark titles. Also see http://drupal.org/node/550164.
    $values = array();
    $url = parse_url($_SERVER['REQUEST_URI']);
    $query = $url['query'];
    if (isset($query) && $query != '') {
      $output = array();
      parse_str($query, $output);
      foreach ($output as $field => $value) {
        $values['query-' . $field] = $value;
      }
      return $values;
    }
  }
}

/**
 * Implementation of hook_form_alter().
 * achive Memorable naming bookmarks functionality matching with prototype.
 */ 
function my_bookmarks_form_alter(&$form, &$form_state, $form_id) {
  // Change flag note confirm page question title and 
  if($form['#theme'] == 'confirm_form' && $form['#parameters'][0] == 'flag_note_delete_confirm' && $form['form_id']['#value'] == 'flag_note_delete_confirm') {
    drupal_set_title("Are you sure you wish to delete this bookmark ?");
    $form['#submit'][0] = 'custom_flag_note_delete_confirm_submit';
  }
  if(isset($form_id) && ( ($form_id == 'flag_note_form') || ($form_id == 'flag_note_edit_form') )) {   
    // form to flag a page as bookmark with memorable name in first attempt
    if($form_id == 'flag_note_form') {
      // change title of page as bookmarking title
      drupal_set_title('Bookmark '.$_REQUEST['title']);
      
      // hide fieldset title - 'flag note'
      unset($form['flag_note']['#title']);
      
      // add descriptive text about bookmarking a page
      $desc_text = '<p>'.t('You can give this bookmark a memorable name, or use the default suggestion below');
      $desc_text .= '<br>'.t('When you finish, just click "Save bookmark".').'</p>';
      
      // modify input textarea for Memorable bookmark as a textbox
      $form['flag_note']['note']['#rows'] = 1;
      
      // Add Cancel link to go back to previous page
      $form['cancel'] = array(
        '#value' => l(t('Cancel'), $_GET['destination']),
      );
      
      // replace caption of submit button 'Bookmark' to 'Save Bookmark'
      $form['flag_note']['submit']['#value'] = 'Save Bookmark';
    }
    
    // form to change previously flagged as bookmark details
    if($form_id == 'flag_note_edit_form') {
      // change title of page as bookmarking title
      $page_title = $form['note']['#default_value'];
      drupal_set_title('Change Bookmark for '.$page_title);
      
      // add descriptive text about bookmarking a page
      $desc_text = '<p>'.t('You can change the bookmark title on this page.');
      $desc_text .= '<br>'.t('When you finish, just click on save changes to return to the previous page.').'</p>';
      
      // modify input textarea for Memorable bookmark as a textbox
      $form['note']['#rows'] = 1;
      
      // replace caption of submit button 'Bookmark' to 'Save Bookmark'
      $form['submit']['#value'] = 'Save changes';
    }
    // add form element to dispaly descriptive text
    $form['note_description'] = array(
      '#type' => 'markup',
      '#value' => $desc_text,
      '#weight' => -2,
    );     
  }
}
function custom_flag_note_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $flag_note = current(flag_note_get_notes(array('fnid' => $form_state['values']['fnid'])));
    $flag = flag_get_flag(NULL, $flag_note['fid']);
    if (variable_get('flag_note_delete_unflags_'. $flag->name, FALSE)) {
      $flag->flag('unflag', $flag_note['content_id'], user_load($flag_note['uid']));
    }
    if (flag_note_remove_notes(array('fnid' => $form_state['values']['fnid']))) {
      drupal_set_message(t('Your Bookmark has been deleted .'));
    }
    else {
      drupal_set_message(t('Your Bookmark cannot be deleted.'), 'error');
    }
  }
}